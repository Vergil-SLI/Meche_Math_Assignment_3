function truncation_error(mode)
    if mode == 1
        % Comparing closed form approximation (of various time step) with numerical solutions
        % Forward Euler Method
        h = linspace(0.375, 0.475, 3); % WHAT ARE GOOD H VALUES
        t_start = 0;
        t_end = 7*pi/4;
        legend_titles = cell(1, length(h));
        legend_titles{1, 1} = "numerical solution";

        % plot the numerical solution
        hold off
        t_list = linspace(t_start, t_end, 20);
        numerical_X_list = solution01(t_list);
        plot(t_list, numerical_X_list, 'black')
        hold on

        % plot the approximations (of various time step)
        for i = 1:length(h)
            [t_list, foward_euler_X_list, h_avg, ~] = forward_euler(@rate_func01,[t_start, t_end],solution01(t_start), h(i));
            plot(t_list, foward_euler_X_list, "-")
            legend_titles{1, i+1} = "closed form approx (h = " + num2str(round(h_avg, 3)) + ")";
        end
        lgd = legend(legend_titles);
        lgd.Location = "southeast";
        xlabel("t")
        ylabel("X Value")

    end

    % _____________________________________________________________________
    % comparing explicit midpoint with closed form solution
    if mode == 2
       % Comparing closed form approximation (of various time step) with numerical solutions
        % Explicit Midpoint
        h = linspace(0.375, 0.475, 3); % WHAT ARE GOOD H VALUES
        t_start = 0;
        t_end = 7*pi/4;
        legend_titles = cell(1, length(h));
        legend_titles{1, 1} = "numerical solution";

        % plot the numerical solution
        hold off
        t_list = linspace(t_start, t_end, 20);
        numerical_X_list = solution01(t_list);
        plot(t_list, numerical_X_list, 'black')
        hold on

        % plot the approximations (of various time step)
        for i = 1:length(h)
            [t_list, foward_euler_X_list, h_avg, ~] = explicit_midpoint(@rate_func01,[t_start, t_end],solution01(t_start), h(i));
            plot(t_list, foward_euler_X_list, "-")
            legend_titles{1, i+1} = "closed form approx (h = " + num2str(round(h_avg, 3)) + ")";
        end
        lgd = legend(legend_titles);
        lgd.Location = "southeast";
        xlabel("t")
        ylabel("X Value")
    end

    % _____________________________________________________________________
    % comparing implicit euler with closed form solution
    if mode == 3
       % Comparing closed form approximation (of various time step) with numerical solutions
        % Backward Euler Method
        h = linspace(0.375, 0.475, 3); % WHAT ARE GOOD H VALUES
        t_start = 0;
        t_end = 7*pi/4;
        legend_titles = cell(1, length(h));
        legend_titles{1, 1} = "numerical solution";

        % plot the numerical solution
        hold off
        t_list = linspace(t_start, t_end, 20);
        numerical_X_list = solution01(t_list);
        plot(t_list, numerical_X_list, 'black')
        hold on

        % plot the approximations (of various time step)
        for i = 1:length(h)
            [t_list, foward_euler_X_list, h_avg, ~] = backward_euler(@rate_func01,[t_start, t_end],solution01(t_start), h(i));
            plot(t_list, foward_euler_X_list, "-")
            legend_titles{1, i+1} = "closed form approx (h = " + num2str(round(h_avg, 3)) + ")";
        end
        lgd = legend(legend_titles);
        lgd.Location = "southeast";
        xlabel("t")
        ylabel("X Value")
    end

    % _____________________________________________________________________
    %comparing implicit midpoint with closed form solution
    if mode == 4
       % Comparing closed form approximation (of various time step) with numerical solutions
        % Implicit Midpoint
        h = linspace(0.375, 0.475, 3); % WHAT ARE GOOD H VALUES
        t_start = 0;
        t_end = 7*pi/4;
        legend_titles = cell(1, length(h));
        legend_titles{1, 1} = "numerical solution";

        % plot the numerical solution
        hold off
        t_list = linspace(t_start, t_end, 20);
        numerical_X_list = solution01(t_list);
        plot(t_list, numerical_X_list, 'black')
        hold on

        % plot the approximations (of various time step)
        for i = 1:length(h)
            [t_list, foward_euler_X_list, h_avg, ~] = implicit_midpoint(@rate_func01,[t_start, t_end],solution01(t_start), h(i));
            plot(t_list, foward_euler_X_list, "-")
            legend_titles{1, i+1} = "closed form approx (h = " + num2str(round(h_avg, 3)) + ")";
        end
        lgd = legend(legend_titles);
        lgd.Location = "southeast";
        xlabel("t")
        ylabel("X Value")
    end

    % _____________________________________________________________________
    % Comparing the 4 different approximation methods when href = 0.38
    if mode == 5
        t_start = 0;
        t_end = 7*pi/4;
        h = 0.38;
        [t_list, foward_euler_X_list, ~, ~] = forward_euler(@rate_func01,[t_start, t_end],solution01(t_start), h);
        [~, explicit_midpoint_X_list, ~, ~] = explicit_midpoint(@rate_func01,[t_start, t_end],solution01(t_start), h);
        [~, backward_euler_X_list, ~, ~] = backward_euler(@rate_func01,[t_start, t_end],solution01(t_start), h);
        [~, implicit_midpoint_X_list, ~, ~] = implicit_midpoint(@rate_func01,[t_start, t_end],solution01(t_start), h);
        numerical_X_list = solution01(t_list);

        hold off
        plot(t_list, foward_euler_X_list, 'b-')
        hold on
        plot(t_list,explicit_midpoint_X_list, 'r-')
        plot(t_list,backward_euler_X_list, 'y-')
        plot(t_list,implicit_midpoint_X_list, 'm-')
        plot(t_list, numerical_X_list, 'g-')

        lgd = legend('forward euler', 'explicit midpoint', 'backwards euler', 'implicit midpoint', 'numerical solution');
        lgd.Location = "southeast";
        xlabel("t")
        ylabel("X Value")
    end


    % _____________________________________________________________________
    if mode == 6
        % Local truncation error between the 2 explicit methods
        t0 = pi/6;
        h = logspace(-5, 1, 100);
        analytical_difference = zeros(1, length(h));
        imp_euler_local_error = zeros(1, length(h));
        exp_midpoint_local_error = zeros(1, length(h));
        h_avg = zeros(1, length(h));

        for i = 1:length(h)
            analytical_difference(i) = abs(solution01(t0+h(1,i))-solution01(t0));
            [imp_euler_local_error(i), ~, ~] = forward_euler_local_error(t0, h(1,i));
            [exp_midpoint_local_error(i), h_avg_temp, ~] = explicit_midpoint_local_error(t0, h(1,i));

            h_avg(1, i) = h_avg_temp;
        end

        [p1,k1] = loglog_fit(h,analytical_difference);
        [p2,k2] = loglog_fit(h_avg,imp_euler_local_error);
        [p3,k3] = loglog_fit(h_avg,exp_midpoint_local_error);

        % plot the local truncation error
        hold off
        loglog(h,analytical_difference, 'b.', MarkerSize=10)
        hold on
        loglog(h_avg,imp_euler_local_error, 'r.', MarkerSize=10)
        loglog(h_avg,exp_midpoint_local_error, 'g.', MarkerSize=10)
        loglog(h, k1*(h.^p1), 'b-')
        loglog(h_avg, k2*(h_avg.^p2), 'r-')
        loglog(h_avg, k3*(h_avg.^p3), 'g-')
        xlabel("Average timestep length h")
        ylabel("Error")
        lgd = legend("analytical difference","forward euler local error", "explicit midpoint local error",...
            "k = " + k1 + ", p = " + p1,...
            "k = " + k2 + ", p = " + p2,...
            "k = " + k3 + ", p = " + p3);
        lgd.Location = "southeast";
    end
    
    % local truncation of all 4 methods
    if mode == 7
        
    end

    % % _____________________________________________________________________
    % Global truncation error between the explicit methods 
    if mode == 8
    tspan = [0, pi/6];
    h = logspace(-5, 1, 100);
    imp_euler_global_error = zeros(1, length(h));
    exp_midpoint_global_error = zeros(1, length(h)); 
    h_avg = zeros(1, length(h));

    for i = 1:length(h)
        [imp_euler_global_error(i), ~, ~] = forward_euler_global_error(tspan, h(1,i));
        [exp_midpoint_global_error(i), h_avg_temp, ~] = explicit_midpoint_global_error(tspan, h(1,i));
        h_avg(1, i) = h_avg_temp;
    end

    [p1,k1] = loglog_fit(h_avg,imp_euler_global_error);
    [p2,k2] = loglog_fit(h_avg,exp_midpoint_global_error);

    % plot the local truncation error
    hold off
    loglog(h_avg,imp_euler_global_error, 'r.', MarkerSize=10)
    hold on
    loglog(h_avg,exp_midpoint_global_error, 'g.', MarkerSize=10)
    loglog(h_avg, k1*(h_avg.^p1), 'r-')
    loglog(h_avg, k2*(h_avg.^p2), 'g-')
    lgd = legend("forward euler global error", "explicit midpoint global error",...
           "k = " + k1 + ", p = " + p1,...
           "k = " + k2 + ", p = " + p2);
    lgd.Location = "southeast";
    xlabel("Average timestep length h")
    ylabel("Error")
    end

    
    % % _____________________________________________________________________
    % Global truncation error between all methods 
    if mode == 9

    end
end


function [local_error, h_avg, num_evals] = forward_euler_local_error(t, h)
    % calculate local error for the first test function
    [~,X_list,h_avg, num_evals] = forward_euler(@rate_func01,[t, t+h],solution01(t),h+1);
    G_t = X_list(end);
    X_t = solution01(t+h);

    local_error = norm(G_t - X_t);
end

function [local_error, h_avg, num_evals] = explicit_midpoint_local_error(t, h)
    % calculate local error for the first test function
    
    [~,X_list, h_avg, num_evals] = explicit_midpoint(@rate_func01,[t, t+h],solution01(t),h+1);
    
    G_t = X_list(end);
    X_t = solution01(t+h);

    local_error = norm(G_t - X_t);
end

function [global_error, h_avg, num_evals] = forward_euler_global_error(tspan, h_ref)
    % calculate global error for the first test function
    [t_list,X_f,h_avg, num_evals] = forward_euler(@rate_func01,tspan,solution01(tspan(1)),h_ref);
    X_tf = solution01(t_list)';

    global_error = norm(X_f - X_tf);
end

function [global_error, h_avg, num_evals] = explicit_midpoint_global_error(tspan, h_ref)
    % calculate global error for the first test function
    [t_list,X_f, h_avg, num_evals] = explicit_midpoint(@rate_func01,tspan,solution01(tspan(1)),h_ref);
    X_tf = solution01(t_list)';

    global_error = norm(X_f - X_tf);
end


% test funcs_______________________________________________________________
% test func 1
function dXdt = rate_func01(t,X)
    dXdt = -5*X + 5*cos(t) - sin(t);
end

function X = solution01(t)
    X = cos(t);
end

% test func 2
function dXdt = rate_func02(t,X)
    dXdt = [0,-1;1,0]*X;
end

function X = solution02(t)
    X = [cos(t);sin(t)];
end